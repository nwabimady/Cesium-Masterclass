import * as THREE from "three";
import { Primitive } from "../Primitive";
import { IdIndexMap } from "../../utils";
export declare class Vertices extends Primitive {
    /** {@link Primitive.mesh } */
    mesh: THREE.Points;
    /** The map between each vertex ID and its index. */
    idMap: IdIndexMap;
    private _buffers;
    /**
     * The color of all the points.
     */
    set baseColor(color: THREE.Color);
    /**
     * The color of all the selected points.
     */
    set selectColor(color: THREE.Color);
    /**
     * Creates a new instance of vertices
     * @param size Visualization point size
     */
    constructor(size?: number);
    /**
     * Gets the coordinates of the vertex with the given ID.
     * @param id the id of the point to retrieve.
     */
    get(id: number): [number, number, number] | null;
    /**
     * Add new points
     * @param ids the vertices to edit.
     * @param coordinates the new coordinates for the vertex.
     */
    set(ids: Iterable<number>, coordinates: number[]): void;
    /**
     * Add new points
     * @param coordinates Points to add.
     * @returns the list of ids of the created vertices.
     */
    add(coordinates: number[][]): number[];
    /**
     * Select or unselects the given vertices.
     * @param active Whether to select or unselect.
     * @param ids List of vertices IDs to select or deselect. If not
     * defined, all vertices will be selected or deselected.
     */
    select(active: boolean, ids?: Iterable<number>): void;
    /**
     * Applies a transformation to the selected vertices.
     * @param matrix Transformation matrix to apply.
     * @param ids IDs of the vertices to transform.
     */
    transform(matrix: THREE.Matrix4, ids?: Set<number>): void;
    /**
     * Quickly removes all the points and releases all the memory used.
     */
    clear(): void;
    /**
     * Removes the selected points from the list
     */
    remove(ids?: Iterable<number>): void;
    addAttribute(attribute: THREE.BufferAttribute): void;
    private removeFromBuffer;
    private updateColor;
}
