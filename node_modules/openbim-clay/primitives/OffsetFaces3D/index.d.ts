import * as THREE from "three";
import { Primitive } from "../Primitive";
import { OffsetFaces } from "../OffsetFaces";
import { Extrusions } from "../Extrusions";
export declare class Walls extends Primitive {
    /** {@link Primitive.mesh } */
    mesh: THREE.Mesh;
    offsetFaces: OffsetFaces;
    extrusions: Extrusions;
    list: {
        [id: number]: {
            id: number;
            extrusion: number;
            holes: Set<number>;
        };
    };
    knots: {
        [id: number]: {
            id: number;
            extrusion: number;
        };
    };
    holes: {
        [wallID: number]: {
            [id: number]: {
                basePoints: Set<number>;
                topPoints: Set<number>;
            };
        };
    };
    defaultAxis: number;
    private _holeIdGenerator;
    constructor();
    regenerate(ids?: number[]): void;
    /**
     * Select or unselects the given Walls.
     * @param active Whether to select or unselect.
     * @param ids List of walls IDs to select or unselect. If not
     * defined, all lines walls be selected or deselected.
     */
    select(active: boolean, ids?: Iterable<number>): void;
    /**
     * Applies a transformation to the selected geometries.
     * @param matrix Transformation matrix to apply.
     */
    transform(matrix: THREE.Matrix4): void;
    setWidth(width: number, ids?: Set<number>): void;
    setOffset(offset: number, ids?: Set<number>): void;
    private update;
    private updateWalls;
    addHole(id: number, holePointsIDs: number[][]): void;
    private deletePreviousExtrusions;
    private regenerateKnots;
    private createGeometry;
    private getVerticalAxis;
    private updateKnotGeometry;
    private createKnotGeometry;
}
