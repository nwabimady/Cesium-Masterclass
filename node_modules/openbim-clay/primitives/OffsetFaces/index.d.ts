import * as THREE from "three";
import { Primitive } from "../Primitive";
import { Faces } from "../Faces";
import { Lines } from "../Lines";
export declare class OffsetFaces extends Primitive {
    /** {@link Primitive.mesh } */
    mesh: THREE.Mesh;
    faces: Faces;
    lines: Lines;
    /**
     * The list of axis. Points are p1, p2, p3, p4
     */
    list: {
        [id: number]: {
            id: number;
            width: number;
            offset: number;
            face: number;
            points: number[];
        };
    };
    /**
     * A knot is the encounter of multiple OffsetFaces at a point. It's made of
     * a point and, optionally, an extra face to fill the gap (if there are more
     * than 3 OffsetFaces).
     */
    knots: {
        [id: number]: number | null;
    };
    get knotsIDs(): number[];
    constructor();
    /**
     * Adds a new set of axes to this instance of OffsetFaces.
     * @param ids the ids of the points that define the axes ({@link Lines}).
     * @param width the width of the faces.
     * @param offset the offset of the faces to their respective axis.
     *
     */
    add(ids: number[], width: number, offset?: number): number[];
    /**
     * Select or unselects the given OffsetFaces.
     * @param active Whether to select or unselect.
     * @param ids List of OffsetFaces IDs to select or unselect. If not
     * defined, all lines will be selected or deselected.
     */
    select(active: boolean, ids?: Iterable<number>): void;
    /**
     * Select or unselects the given knots.
     * @param active Whether to select or unselect.
     * @param ids List of knot IDs to select or unselect. If not
     * defined, all knots will be selected or deselected.
     */
    selectKnots(active: boolean, ids?: Iterable<number>): void;
    /**
     * Removes OffsetFaces.
     * @param ids List of OffsetFaces to remove. If no face is specified,
     * removes all the selected OffsetFaces.
     */
    remove(ids?: Iterable<number>): void;
    /**
     * Removes Knots and all the related OffsetFaces.
     * @param ids List of knots to remove. If no knot is specified,
     * removes all the selected knots.
     */
    removePoints(ids?: Iterable<number>): void;
    /**
     * Sets the offset of the specified OffsetFaces.
     * @param offset The offset to set.
     * @param ids List of knot IDs whose offset to change. If not specified,
     * it will change the offset of the selected OffsetFaces.
     */
    setOffset(offset: number, ids?: Iterable<number>): void;
    /**
     * Sets the width of the specified OffsetFaces.
     * @param width The width to set.
     * @param ids List of knot IDs whose width to change. If not specified,
     * it will change the width of the selected OffsetFaces.
     */
    setWidth(width: number, ids?: Iterable<number>): void;
    /**
     * Applies a transformation to the selected vertices.
     * @param matrix Transformation matrix to apply.
     */
    transform(matrix: THREE.Matrix4): void;
    getRelatedKnots(lineIDs: Iterable<number>): Set<number>;
    getRelatedLines(pointIDs: Iterable<number>, neighbors?: boolean): Set<number>;
    private getLinesOfPoints;
    private getFacePoints;
    private updateOffsetFaces;
    private updateKnots;
    private getNormalVectorsSortedClockwise;
    private order2DVectorsClockwise;
    private getAllNormalizedVectors;
}
