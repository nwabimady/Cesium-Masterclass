import * as THREE from "three";
import { Faces } from "../Faces";
import { Lines } from "../Lines";
import { Primitive } from "../Primitive";
export interface ExtrusionHole {
    base: number;
    top: number;
    faces: Set<number>;
}
export declare class Extrusions extends Primitive {
    /** {@link Primitive.mesh } */
    mesh: THREE.Mesh;
    /**
     * The list of outer points that define the faces. Each point corresponds to a set of {@link Vertices}. This way,
     * we can provide an API of faces that share vertices, but under the hood the vertices are duplicated per face
     * (and thus being able to contain the normals as a vertex attribute).
     */
    list: {
        [id: number]: {
            id: number;
            baseFace: number;
            topFace: number;
            sideFaces: Set<number>;
            path: number;
            holes: {
                [id: number]: ExtrusionHole;
            };
        };
    };
    /**
     * The geometric representation of the faces of all the extrusions.
     */
    faces: Faces;
    /**
     * The geometric representation of the lines that represent the axis.
     */
    lines: Lines;
    private _faceExtrusionMap;
    private _idGenerator;
    private _holeIdGenerator;
    constructor();
    clear(): void;
    add(faceID: number, pathID: number): number;
    /**
     * Removes Extrusions.
     * @param ids List of extrusions to remove. If no face is specified,
     * removes all the selected extrusions.
     */
    remove(ids?: Iterable<number>): void;
    /**
     * Given a face, returns the extrusion that contains it.
     * @param faceID The ID of the face whose extrusion to get.
     */
    getFromFace(faceID: number): number | undefined;
    /**
     * Select or unselects the given Extrusions.
     * @param active Whether to select or unselect.
     * @param ids List of extrusion IDs to select or unselect. If not
     * defined, all extrusions will be selected or deselected.
     */
    select(active: boolean, ids?: Iterable<number>): void;
    private createExtrusion;
    private createSideFaces;
}
