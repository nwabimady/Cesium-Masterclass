import * as THREE from "three";
import { Vertices } from "../Vertices";
import { Primitive } from "../Primitive";
import { IdIndexMap } from "../../utils";
export declare class Lines extends Primitive {
    /** {@link Primitive.mesh } */
    mesh: THREE.LineSegments<THREE.BufferGeometry<THREE.NormalBufferAttributes>, THREE.Material | THREE.Material[]>;
    /**
     * The list of segments.
     */
    list: {
        [id: number]: {
            id: number;
            start: number;
            end: number;
        };
    };
    /**
     * The geometric representation of the vertices that define this instance of lines.
     */
    vertices: Vertices;
    /**
     * The map that keeps track of the segments ID and their position in the geometric buffer.
     */
    idMap: IdIndexMap;
    /**
     * The list of points that define each line.
     */
    points: {
        [id: number]: {
            start: Set<number>;
            end: Set<number>;
        };
    };
    private _buffers;
    /**
     * The color of all the points.
     */
    set baseColor(color: THREE.Color);
    /**
     * The color of all the selected points.
     */
    set selectColor(color: THREE.Color);
    constructor();
    /**
     * Quickly removes all the lines and releases all the memory used.
     */
    clear(): void;
    /**
     * Adds a segment between two {@link points}.
     * @param ids - the IDs of the {@link points} that define the segments.
     */
    add(ids: number[]): number[];
    get(id: number): [number, number, number][] | null;
    /**
     * Adds the points that can be used by one or many lines.
     * @param points the list of (x, y, z) coordinates of the points.
     */
    addPoints(points: number[][]): number[];
    /**
     * Select or unselects the given lines.
     * @param active Whether to select or unselect.
     * @param ids List of lines IDs to select or unselect. If not
     * defined, all lines will be selected or deselected.
     */
    select(active: boolean, ids?: Iterable<number>): void;
    selectPoints(active: boolean, ids?: number[]): void;
    /**
     * Removes the specified lines.
     * @param ids List of lines to remove. If no line is specified,
     * removes all the selected lines.
     */
    remove(ids?: Iterable<number>): void;
    /**
     * Removes the specified points and all lines that use them.
     * @param ids List of points to remove. If no point is specified,
     * removes all the selected points.
     */
    removePoints(ids?: Iterable<number>): void;
    /**
     * Sets a point of the line to a specific position.
     * @param id The point whose position to set.
     * @param coordinates The new coordinates of the point.
     */
    setPoint(id: number, coordinates: number[]): void;
    transform(matrix: THREE.Matrix4): void;
    private getPointIndices;
    private setupAttributes;
    private removeFromBuffer;
    private transformLines;
    private setLines;
    private updateColor;
}
