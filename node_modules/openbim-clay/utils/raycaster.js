import * as THREE from "three";
export class Raycaster {
    get trackMouse() {
        return this._trackMouse;
    }
    set trackMouse(active) {
        this._trackMouse = active;
        if (active) {
            window.addEventListener("mousemove", this.getMousePosition);
        }
        else {
            window.removeEventListener("mousemove", this.getMousePosition);
        }
    }
    constructor() {
        this._mouse = new THREE.Vector2();
        this._mouseEvent = new THREE.Vector2();
        this._trackMouse = false;
        this.getMousePosition = (event) => {
            this._mouseEvent.x = event.clientX;
            this._mouseEvent.y = event.clientY;
        };
        this.core = new THREE.Raycaster();
        if (!this.core.params.Points) {
            throw new Error("Raycaster has undefined Points");
        }
        this.core.params.Points.threshold = 0.2;
    }
    cast(items) {
        if (!this.domElement || !this.camera) {
            throw new Error("DOM element and camera must be initialized!");
        }
        const x = this._mouseEvent.x;
        const y = this._mouseEvent.y;
        const b = this.domElement.getBoundingClientRect();
        this._mouse.x = ((x - b.left) / (b.right - b.left)) * 2 - 1;
        this._mouse.y = -((y - b.top) / (b.bottom - b.top)) * 2 + 1;
        this.core.setFromCamera(this._mouse, this.camera);
        return this.core.intersectObjects(items);
    }
}
//# sourceMappingURL=raycaster.js.map