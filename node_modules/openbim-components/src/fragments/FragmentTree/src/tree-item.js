import { Component, Event, UIElement, } from "../../../base-types";
import { TreeView, Button } from "../../../ui";
export class FragmentTreeItem extends Component {
    get children() {
        return this._children;
    }
    set children(children) {
        this._children = children;
        children.forEach((child) => {
            const subTree = child.uiElement.get("tree");
            this.uiElement.get("tree").addChild(subTree);
        });
    }
    constructor(components, classifier, content) {
        super(components);
        this.name = "FragmentTreeItem";
        this.enabled = true;
        this.filter = {};
        this.uiElement = new UIElement();
        this.onSelected = new Event();
        this.onHovered = new Event();
        this._children = [];
        const main = new Button(components);
        const tree = new TreeView(components, content);
        this.uiElement.set({ main, tree });
        tree.onClick.add(async () => {
            const found = await classifier.find(this.filter);
            await this.onSelected.trigger(found);
        });
        tree.get().onmouseenter = async () => {
            const found = await classifier.find(this.filter);
            await this.onHovered.trigger(found);
        };
    }
    async dispose() {
        this.uiElement.dispose();
        this.onSelected.reset();
        this.onHovered.reset();
        for (const child of this.children) {
            await child.dispose();
        }
    }
    get() {
        return { name: this.name, filter: this.filter, children: this.children };
    }
}
//# sourceMappingURL=tree-item.js.map