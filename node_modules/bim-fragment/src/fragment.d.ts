import * as THREE from "three";
import { Items, IFragment } from "./base-types";
import { FragmentMesh } from "./fragment-mesh";
import { Blocks } from "./blocks";
import { FragmentsGroup } from "./fragments-group";
export declare class Fragment implements IFragment {
    mesh: FragmentMesh;
    capacity: number;
    fragments: {
        [id: string]: Fragment;
    };
    id: string;
    blocks: Blocks;
    items: string[];
    hiddenInstances: {
        [id: string]: Items;
    };
    group?: FragmentsGroup;
    composites: {
        [id: string]: number;
    };
    get ids(): Set<string>;
    constructor(geometry: THREE.BufferGeometry, material: THREE.Material | THREE.Material[], count: number);
    dispose(disposeResources?: boolean): void;
    getItemID(instanceID: number, blockID: number): string;
    getInstanceAndBlockID(itemID: string): {
        instanceID: number;
        blockID: number;
    };
    getVertexBlockID(geometry: THREE.BufferGeometry, index: number): number;
    getItemData(itemID: string): {
        instanceID: number;
        blockID: number;
    };
    getInstance(instanceID: number, matrix: THREE.Matrix4): void;
    setInstance(instanceID: number, items: Items): void;
    addInstances(items: Items[]): void;
    removeInstances(itemsIDs: string[]): void;
    clear(): void;
    addFragment(id: string, material?: THREE.Material[]): Fragment;
    removeFragment(id: string): void;
    resetVisibility(): void;
    setVisibility(visible: boolean, itemIDs?: Set<string>): void;
    resize(size: number): void;
    exportData(): {
        ids: string;
        id: string;
        position: Float32Array;
        normal: Float32Array;
        index: number[];
        blockID: number[];
        groups: number[];
        materials: number[];
        matrices: number[];
        colors: number[];
    };
    private copyGroups;
    private initializeGeometry;
    private saveItemsInMap;
    private resizeCapacityIfNeeded;
    private createFragmentMeshWithNewSize;
    private disposeNestedFragments;
    private checkBlockNumberValid;
    private checkIfInstanceExist;
    private deleteAndRearrangeInstances;
    private deleteAndRearrange;
    private getItemIndex;
    private getInstanceIDFromIndex;
    private toggleInstanceVisibility;
    private makeInstancesInvisible;
    private makeInstancesVisible;
    private filterHiddenItems;
}
