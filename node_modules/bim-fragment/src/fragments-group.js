import * as THREE from "three";
// TODO: Document this
export class FragmentsGroup extends THREE.Group {
    constructor() {
        super(...arguments);
        this.items = [];
        this.boundingBox = new THREE.Box3();
        this.coordinationMatrix = new THREE.Matrix4();
        this.keyFragments = {};
        // data: [expressID: number]: [keys, rels]
        this.data = {};
        this.ifcMetadata = {
            name: "",
            description: "",
            schema: "IFC2X3",
            maxExpressID: 0,
        };
    }
    // TODO: Force all item IDs to be numbers or strings
    getFragmentMap(expressIDs) {
        const fragmentMap = {};
        for (const expressID of expressIDs) {
            const data = this.data[expressID];
            if (!data)
                continue;
            for (const key of data[0]) {
                const fragmentID = this.keyFragments[key];
                if (!fragmentMap[fragmentID])
                    fragmentMap[fragmentID] = new Set();
                fragmentMap[fragmentID].add(expressID);
            }
        }
        return fragmentMap;
    }
    dispose(disposeResources = true) {
        for (const fragment of this.items) {
            fragment.dispose(disposeResources);
        }
        this.coordinationMatrix = new THREE.Matrix4();
        this.keyFragments = {};
        this.data = {};
        this.properties = {};
    }
}
//# sourceMappingURL=fragments-group.js.map