import * as THREE from "three";
import { BufferAttribute } from "three/src/core/BufferAttribute";
import { InterleavedBufferAttribute } from "three/src/core/InterleavedBufferAttribute";
import { FragmentMesh } from "./fragment-mesh";
export interface Indices {
    [materialID: number]: number[];
}
export interface VertexGroup {
    start: number;
    count: number;
    materialIndex?: number;
}
export interface IndicesMap {
    indexCache: Uint32Array;
    map: Map<number, Indices>;
}
export interface Items {
    ids?: string[];
    transform: THREE.Matrix4;
    color?: THREE.Color;
}
export interface IFragmentGeometry extends THREE.BufferGeometry {
    attributes: {
        [name: string]: BufferAttribute | InterleavedBufferAttribute;
        blockID: BufferAttribute;
    };
    index: BufferAttribute;
}
export interface IFragmentMesh {
    material: THREE.Material[];
    geometry: IFragmentGeometry;
    elementCount: number;
}
export interface IFragment {
    mesh: FragmentMesh;
    capacity: number;
    fragments: {
        [id: string]: IFragment;
    };
    id: string;
    items: string[];
    getItemID: (instanceID: number, blockID: number) => string;
}
export interface IfcProperties {
    [expressID: number]: {
        [attribute: string]: any;
    };
}
export type IfcSchema = "IFC2X3" | "IFC4" | "IFC4X3";
export interface IfcMetadata {
    name: string;
    description: string;
    schema: IfcSchema;
    maxExpressID: number;
}
export interface FragmentMap {
    [fragmentID: string]: Set<number>;
}
export interface IifcAlignmentData {
    coordinates: Float32Array;
    alignmentIndex: number[];
    curveIndex: number[];
}
