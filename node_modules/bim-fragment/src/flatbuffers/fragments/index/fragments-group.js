// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { Civil } from '../../fragments/index/civil.js';
import { Fragment } from '../../fragments/index/fragment.js';
export class FragmentsGroup {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsFragmentsGroup(bb, obj) {
        return (obj || new FragmentsGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsFragmentsGroup(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FragmentsGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    items(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Fragment()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    itemsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    civil(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new Civil()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    coordinationMatrix(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    coordinationMatrixLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    coordinationMatrixArray() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    ids(index) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    idsLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    idsArray() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    itemsKeys(index) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    itemsKeysLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    itemsKeysArray() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    itemsKeysIndices(index) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    itemsKeysIndicesLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    itemsKeysIndicesArray() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    itemsRels(index) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    itemsRelsLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    itemsRelsArray() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    itemsRelsIndices(index) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    itemsRelsIndicesLength() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    itemsRelsIndicesArray() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    fragmentKeys(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ifcName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ifcDescription(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ifcSchema(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    maxExpressId() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    boundingBox(index) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    boundingBoxLength() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    boundingBoxArray() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startFragmentsGroup(builder) {
        builder.startObject(16);
    }
    static addItems(builder, itemsOffset) {
        builder.addFieldOffset(0, itemsOffset, 0);
    }
    static createItemsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startItemsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addCivil(builder, civilOffset) {
        builder.addFieldOffset(1, civilOffset, 0);
    }
    static addCoordinationMatrix(builder, coordinationMatrixOffset) {
        builder.addFieldOffset(2, coordinationMatrixOffset, 0);
    }
    static createCoordinationMatrixVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startCoordinationMatrixVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addIds(builder, idsOffset) {
        builder.addFieldOffset(3, idsOffset, 0);
    }
    static createIdsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    }
    static startIdsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addItemsKeys(builder, itemsKeysOffset) {
        builder.addFieldOffset(4, itemsKeysOffset, 0);
    }
    static createItemsKeysVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    }
    static startItemsKeysVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addItemsKeysIndices(builder, itemsKeysIndicesOffset) {
        builder.addFieldOffset(5, itemsKeysIndicesOffset, 0);
    }
    static createItemsKeysIndicesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    }
    static startItemsKeysIndicesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addItemsRels(builder, itemsRelsOffset) {
        builder.addFieldOffset(6, itemsRelsOffset, 0);
    }
    static createItemsRelsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    }
    static startItemsRelsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addItemsRelsIndices(builder, itemsRelsIndicesOffset) {
        builder.addFieldOffset(7, itemsRelsIndicesOffset, 0);
    }
    static createItemsRelsIndicesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    }
    static startItemsRelsIndicesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addFragmentKeys(builder, fragmentKeysOffset) {
        builder.addFieldOffset(8, fragmentKeysOffset, 0);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(9, idOffset, 0);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(10, nameOffset, 0);
    }
    static addIfcName(builder, ifcNameOffset) {
        builder.addFieldOffset(11, ifcNameOffset, 0);
    }
    static addIfcDescription(builder, ifcDescriptionOffset) {
        builder.addFieldOffset(12, ifcDescriptionOffset, 0);
    }
    static addIfcSchema(builder, ifcSchemaOffset) {
        builder.addFieldOffset(13, ifcSchemaOffset, 0);
    }
    static addMaxExpressId(builder, maxExpressId) {
        builder.addFieldInt32(14, maxExpressId, 0);
    }
    static addBoundingBox(builder, boundingBoxOffset) {
        builder.addFieldOffset(15, boundingBoxOffset, 0);
    }
    static createBoundingBoxVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startBoundingBoxVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endFragmentsGroup(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishFragmentsGroupBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedFragmentsGroupBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
}
//# sourceMappingURL=fragments-group.js.map