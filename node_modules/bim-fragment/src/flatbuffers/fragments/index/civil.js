// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { Alignment } from '../../fragments/index/alignment.js';
export class Civil {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCivil(bb, obj) {
        return (obj || new Civil()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCivil(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Civil()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    alignmentHorizontal(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Alignment()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    alignmentVertical(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new Alignment()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    alignment3d(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new Alignment()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startCivil(builder) {
        builder.startObject(3);
    }
    static addAlignmentHorizontal(builder, alignmentHorizontalOffset) {
        builder.addFieldOffset(0, alignmentHorizontalOffset, 0);
    }
    static addAlignmentVertical(builder, alignmentVerticalOffset) {
        builder.addFieldOffset(1, alignmentVerticalOffset, 0);
    }
    static addAlignment3d(builder, alignment3dOffset) {
        builder.addFieldOffset(2, alignment3dOffset, 0);
    }
    static endCivil(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
//# sourceMappingURL=civil.js.map